# Interface layer 

* Net/3接口层试图在网络协议和连接到一个系统的网络设备的驱动器间提供一个与硬件无关的编程接口。这个接口层为所有的设备提供以下支持：
  * 精心定义的接口函数；
  * 标准的统计与控制标志；
  * 与设备无关的存储协议地址的方法；
  * 标准的输出分组的排队方法。

* 接口层提供可靠的分组传输，仅要求提供最大努力(best-effort)的服务。更高协议层必须弥补这种可靠性缺陷。本章说明为所有网络接口维护的通用数据结构。为了说明
相关数据结构和算法，我们参考N e t / 3中三种特定的网络接口：
  1. AMD 7990 LANCE以太网接口：一个能广播局域网的例子。
  2. 串行线I P ( S L I P )接口：一个在异步串行线上的点对点网络的例子。
  3. 环回接口：一个逻辑网络把所有输出分组作为输入返回。


* i f n e t结构
  * 结构i f n e t中包含所有接口的通用信息。在系统初始化期间，分别为每个网络设备分配
一个独立的i f n e t结构。每个i f n e t结构有一个列表，它包含这
个设备的一个或多个协议地址。图 3 - 5说明了一个接口和它的地址
之间的关系。
在图3 - 5中的接口显示了 3个存放在i f a d d r结构中的协议地
址。虽然一些网络接口，例如 S L I P，仅支持一个协议；而其他接
口，如以太网，支持多个协议并需要多个地址。例如，一个系统
可能使用一个以太网接口同时用于 I n t e r n e t和O S I两个协议。一个
类型字段标识每个以太网帧的内容，并且因为 I n t e r n e t和O S I协议
使用不同的编址方式，以太网接口必须有一个 I n t e r n e t地址和一个
O S I地址。所有地址用一个链表链接起来 (图3 - 5右侧的箭头)，并
且每个结构包含一个回指指针指向相关的 i f n e t结构(图3 - 5左侧
的箭头)。
可能一个网络接口支持同一协议的多个地址。例如，在 N e t / 3中可能为一个以太网接口分
配两个I n t e r n e t地址。

1. 通用接口信息
  * if_name是一个短字符串，用于标识接口的类型，而if_unit标识多个相同类型的
实例。例如，一个系统有两个 S L I P接口，每个都有一个 i f _ n a m e，包含两字节的“ s 1”和
一个i f _ u n i t。对第一个接口，i f _ u n i t为0；对第二个接口为1。i f _ i n d e x在内核中唯一
地标识这个接口，这在s y s c t l系统调用(见1 9 . 1 4节)以及路由域中要用到。
有时一个接口并不被一个协议地址唯一地标识。例如，几个 S L I P连接可以有同
样的本地I P地址。在这种情况下，i f _ i n d e x明确地指明这个接口。
i f _ f l a g s表明接口的操作状态和属性。一个进程能检查所有的标志，但不能改变在图 3 -
7中“内核专用”列中作了记号的标志。这些标志用 4 . 4节讨论的命令 S I O C G I F F L A G S和
S I O C S I F F L A G S来访问。

2. 接口时钟
8 7 i f _ t i m e r以秒为单位记录时间，直到内核为此接口调用函数 i f _ w a t c h d o g为止。这个
函数用于设备驱动程序定时收集接口统计，或用于复位运行不正确的硬件。
3. BSD分组过滤器
8 8 - 8 9 下面两个成员，i f _ p c o u n t和i f _ b p f，支持B S D分组过滤器( B P F )。通过B P F，一
个进程能接收由此接口传输或接收的分组的备份。

 
